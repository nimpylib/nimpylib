nimTitle	list_decl	_._/builtins/list_decl.html	module src/pylib/builtins/list_decl		0
nim	list	_._/builtins/list_decl.html#list	type list		4
nim	PyList	_._/builtins/list_decl.html#PyList	type PyList		8
nim	asSeq	_._/builtins/list_decl.html#asSeq.c,PyList[T]	converter asSeq[T](self: PyList[T]): seq[T]		11
nim	asSeq	_._/builtins/list_decl.html#asSeq.c,PyList[T]_2	converter asSeq[T](self: var PyList[T]): var seq[T]		12
nim	`@`	_._/builtins/list_decl.html#@,PyList[T]	proc `@`[T](ls: PyList[T]): seq[T]		14
nim	setLen	_._/builtins/list_decl.html#setLen,PyList,Natural	proc setLen(self: PyList; len: Natural)		15
nim	repr	_._/builtins/list_decl.html#repr,PyList[T: set or string or openArray]	proc repr[T: set | string | openArray](self: PyList[T]): string		21
nim	newPyList	_._/builtins/list_decl.html#newPyList,sinkseq[T]	proc newPyList[T](s: sink seq[T]): PyList[T]		25
nim	newPyList	_._/builtins/list_decl.html#newPyList,sinkopenArray[T]	proc newPyList[T](a: sink openArray[T]): PyList[T]		26
nim	newPyList	_._/builtins/list_decl.html#newPyList,sinkopenArray[int]	proc newPyList(a: sink openArray[int]): PyList[int]		37
nim	newPyList	_._/builtins/list_decl.html#newPyList,sinkopenArray[float]	proc newPyList(a: sink openArray[float]): PyList[float]		38
nim	newPyList	_._/builtins/list_decl.html#newPyList,sinkopenArray[char]	proc newPyList(a: sink openArray[char]): PyList[char]		39
nim	newPyList	_._/builtins/list_decl.html#newPyList,int	proc newPyList[T](len = 0): PyList[T]		41
nim	newPyListOfCap	_._/builtins/list_decl.html#newPyListOfCap,int	proc newPyListOfCap[T](cap = 0): PyList[T]		42
nim	items	_._/builtins/list_decl.html#items.i,PyList[T]	iterator items[T](self: PyList[T]): T		45
nim	mitems	_._/builtins/list_decl.html#mitems.i,PyList[T]	iterator mitems[T](self: PyList[T]): var T		48
nim	pairs	_._/builtins/list_decl.html#pairs.i,PyList[T]	iterator pairs[T](self: PyList[T]): (int, T)		52
nim	getPtr	_._/builtins/list_decl.html#getPtr,sinkPyList[T],	proc getPtr[T](self: sink PyList[T]; i: Natural | BackwardsIndex): ptr T		62
nim	checkLenientOps	_._/builtins/list_decl.html#checkLenientOps.t,,	template checkLenientOps(A, B)		69
nim	`==`	_._/builtins/list_decl.html#==,PyList[A],PyList[B]	proc `==`[A, B](self: PyList[A]; o: PyList[B]): bool		98
nim	`==`	_._/builtins/list_decl.html#==,PyList[A],openArray[B]	proc `==`[A, B](self: PyList[A]; o: openArray[B]): bool		101
nim	`==`	_._/builtins/list_decl.html#==.t,openArray[A],PyList[B]	template `==`[A, B](o: openArray[A]; self: PyList[B]): bool		108
nim	`<=`	_._/builtins/list_decl.html#<=,PyList[A],PyList[B]	proc `<=`[A, B](self: PyList[A]; o: PyList[B]): bool		98
nim	`<=`	_._/builtins/list_decl.html#<=,PyList[A],openArray[B]	proc `<=`[A, B](self: PyList[A]; o: openArray[B]): bool		101
nim	`<=`	_._/builtins/list_decl.html#<=.t,openArray[A],PyList[B]	template `<=`[A, B](o: openArray[A]; self: PyList[B]): bool		109
nim	`<`	_._/builtins/list_decl.html#<,PyList[A],PyList[B]	proc `<`[A, B](self: PyList[A]; o: PyList[B]): bool		98
nim	`<`	_._/builtins/list_decl.html#<,PyList[A],openArray[B]	proc `<`[A, B](self: PyList[A]; o: openArray[B]): bool		101
nim	`<`	_._/builtins/list_decl.html#<.t,openArray[A],PyList[B]	template `<`[A, B](o: openArray[A]; self: PyList[B]): bool		110
nimgrp	==	_._/builtins/list_decl.html#==-procs-all	proc		108
nimgrp	newpylist	_._/builtins/list_decl.html#newPyList-procs-all	proc		25
nimgrp	<=	_._/builtins/list_decl.html#<=-procs-all	proc		109
nimgrp	<	_._/builtins/list_decl.html#<-procs-all	proc		110
nimgrp	asseq	_._/builtins/list_decl.html#asSeq-converters-all	converter		11
